/* ******* Listing of SQL Server sessions waiting for client program to fetch data
   ******* => if status does not change, the program is probably in "zombie" mode!
   *******
   ******* To retrieve the entire query, make sure that your TEXTSIZE parameter is
   ******* large enough, and run
   *******   SELECT [text] FROM sys.dm_exec_sql_text (<<sql_handle>>)
******** */
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
SET LOCK_TIMEOUT 500

SELECT
  ses.session_id AS [session],
  ses.login_time AS [connection start],
  ses.login_name AS [login],
  CASE WHEN ses.program_name LIKE 'Microsoft SQL Server Management Studio%'
       THEN '(user)'
       WHEN ses.program_name LIKE 'Microsoft® Visual Studio®%'
       THEN '(user)'
       WHEN ses.program_name LIKE 'SQLAgent%'
       THEN '(GTS batch job)'
       WHEN ses.program_name ='Microsoft SQL Server Analysis Services'
       THEN 'anonymous SSAS'
       WHEN ses.program_name ='Microsoft SQL Server'
       THEN 'anonymous SSIS'
       WHEN ses.program_name ='.Net SqlClient Data Provider'
       THEN 'anonymous .Net'
       WHEN ses.program_name ='Microsoft SQL Server JDBC Driver'
       THEN 'anonymous Java'
       ELSE ses.program_name
  END AS [program tag],
  ses.host_name AS [host tag],
  ses.status +' / ' +qry.status +' ' +qry.command AS [session/query status],
  qry.last_wait_type +' for last '
    +CONVERT(varchar, CONVERT(decimal(5,1), qry.wait_time/1000.0)) + ' s'
    AS [wait status],
  DB_NAME(qry.database_id) AS [DB used],
  CASE WHEN qry.blocking_session_id IS NULL OR qry.blocking_session_id =0
       THEN ''
       ELSE CONVERT(varchar, qry.blocking_session_id)
  END AS [blocked by],
  CASE WHEN qry.lock_timeout IS NULL OR qry.lock_timeout =0
       THEN ''
       WHEN qry.lock_timeout =-1
       THEN '(infin.)'
       ELSE CONVERT(varchar, CEILING(qry.lock_timeout/1000.0)) + ' s'
  END AS [lock timeout],
  CASE WHEN qry.open_transaction_count IS NULL OR qry.open_transaction_count =0
       THEN ''
       ELSE CONVERT(varchar, qry.open_transaction_count)
  END AS [transactions],
  ses.last_request_start_time AS [query start],
  CASE WHEN qry.total_elapsed_time >=3600000
       THEN CONVERT(varchar, qry.total_elapsed_time/3600000) +'h '
       ELSE ''
  END
   +CASE WHEN qry.total_elapsed_time >=60000
         THEN CONVERT(varchar, (qry.total_elapsed_time%3600000)/60000) +'mn '
         ELSE ''
    END
   +CONVERT(varchar, (qry.total_elapsed_time%60000)/1000) +'s'
    AS [elapsed],
  CONVERT(decimal(5,1), qry.cpu_time/1000.0) AS [CPU (s)],
  qry.logical_reads AS [logical R],
  qry.reads AS [physical R],
  qry.writes AS [physical W],
  CASE WHEN qry.sql_handle is null
       THEN null
       ELSE REPLACE(REPLACE(
                SUBSTRING(qrytxt.text, (qry.statement_start_offset/2) +1, 252),
                '  ',' '),
                '  ',' ')
            +'...'
  END AS [query (excerpt)],
  CASE WHEN qry.sql_handle is null
       THEN null
       WHEN qrytxt.text like '%CREATE% PROCEDURE%'
       THEN SUBSTRING(qrytxt.text, CHARINDEX(' PROCEDURE', qrytxt.text) +11, 64)
       WHEN qrytxt.text like '%CREATE% FUNCTION%'
       THEN SUBSTRING(qrytxt.text, CHARINDEX(' FUNCTION',  qrytxt.text) +10, 64)
       ELSE ''
  END AS [from procedure],
  qry.sql_handle
FROM sys.dm_exec_sessions ses
INNER JOIN sys.dm_exec_requests qry
  ON qry.session_id =ses.session_id
OUTER APPLY sys.dm_exec_sql_text(qry.sql_handle) qrytxt
WHERE ses.is_user_process =1 AND ses.session_id <>@@SPID AND ses.status <>'sleeping'
  AND qry.last_wait_type ='ASYNC_NETWORK_IO' AND qry.wait_time >0
ORDER BY ses.last_request_start_time
